package org.wtrader.loader.crawler;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.log4j.Logger;
import org.wtrader.loader.crawler.interfaces.ICrawlerAllCompanies;
import org.wtrader.loader.utils.CrawlerUtils;
import org.wtrader.loader.utils.properties.ApplicationProperties;
import org.wtrader.loader.utils.properties.IApplicationProperties;

@Named
public class CrawlerAllCompanies implements ICrawlerAllCompanies {

	private static final Logger LOGGER = Logger.getLogger(CrawlerAllCompanies.class);

	private static final String LINK = "http://www.bmfbovespa.com.br/cias-listadas/empresas-listadas/BuscaEmpresaListada.aspx?Idioma=pt-br";

	private static final String BODY = "__EVENTTARGET=ctl00%3AcontentPlaceHolderConteudo%3ABuscaNomeEmpresa1%3AbtnTodas&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwULLTEzNTQ2MzU3NjkPZBYCZg8PFggeBG5vZGUFJGNiY2I5NGQ2LWI4ODMtNGI1MS1hMWY4LTAwOGQwMjIxMzgwZR4KUGFyZW50Tm9kZQUxMzUyMTg3NTgtYjYxOS00OGFjLWIxNGEtOWYwOTUwNzEwZjZlP0lkaW9tYT1wdC1ich4LQ3VycmVudE5vZGUFRi9jaWFzLWxpc3RhZGFzL2VtcHJlc2FzLWxpc3RhZGFzL2J1c2NhZW1wcmVzYWxpc3RhZGEuYXNweD9JZGlvbWE9cHQtYnIeCkN1cnJlbnRVcmwFRi9jaWFzLWxpc3RhZGFzL2VtcHJlc2FzLWxpc3RhZGFzL0J1c2NhRW1wcmVzYUxpc3RhZGEuYXNweD9JZGlvbWE9cHQtYnJkFgICAw9kFgICAQ9kFgoCAQ9kFggCAw8WAh4HVmlzaWJsZWhkAgwPFgYeB29uY2xpY2sFEHRoaXMudmFsdWUgPSAnJzseBm9uYmx1cgUxaWYodGhpcy52YWx1ZSA9PSAnJykge3RoaXMudmFsdWU9IG5vbWVUZXh0QnVzY2E7fR4Kb25rZXlwcmVzcwUkcmV0dXJuIGtleVByZXNzUGVzcXVpc2EodGhpcyxldmVudCk7ZAINDw8WAh4NT25DbGllbnRDbGljawUccmV0dXJuIFZlcmlmaWNhckNhbXBvQnVzY2EoKWRkAg4PFgIeBFRleHQFzjI8ZGl2IGlkPSdtZW51Jz48dWwgaWQ9J21lbnVIb3Jpeic%2BPGxpIGlkPSdhYm1mYm92ZXNwYSc%2BPGEgaHJlZj0nIycgY2xhc3M9J2FibWZib3Zlc3BhJyBpZD0nbGlua0FibWYnPjxpbWcgc3JjPScvc2hhcmVkL2Nzcy9pbWcvdHJhbnNwLmdpZicgLz48L2E%2BPHVsIG9ubW91c2VvdmVyPSJsaW5rQWJtZi5jbGFzc05hbWU9J2FibWZib3Zlc3BhaG92ZXInOyIgb25tb3VzZW91dD0ibGlua0FibWYuY2xhc3NOYW1lPSdhYm1mYm92ZXNwYSc7Ij48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1zb2JyZS1hLWJvbHNhLmFzcHgnIHRhcmdldD0nJz5PIHF1ZSBhIEJvbHNhIGZhejwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvYS1ibWZib3Zlc3BhL3Zpc2l0YXMtYS1ib2xzYS92aXNpdGFzLWEtYm9sc2EuYXNweCcgdGFyZ2V0PScnPlZpc2l0ZSBhIEJvbHNhPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9hLWJtZmJvdmVzcGEvdW5pZGFkZXMvdW5pZGFkZXMuYXNweCcgdGFyZ2V0PScnPk5vc3NhcyB1bmlkYWRlczwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvYS1ibWZib3Zlc3BhL3BhcmNlcmlhLWVzdHJhdGVnaWNhLWNtZWdyb3VwL3BhcmNlcmlhLWVzdHJhdGVnaWNhLmFzcHgnIHRhcmdldD0nJz5QYXJjZXJpYXMgRXN0cmF0w6lnaWNhczwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvYS1ibWZib3Zlc3BhL3RyYWJhbGhlLWNvbm9zY28vdHJhYmFsaGUtY29ub3Njby5hc3B4JyB0YXJnZXQ9Jyc%2BVHJhYmFsaGUgbmEgQm9sc2E8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3NhbGEtZGUtaW1wcmVuc2Evc2FsYWltcHJlbnNhLmFzcHg%2FaWRpb21hPXB0LWJyJyB0YXJnZXQ9Jyc%2BU2FsYSBkZSBJbXByZW5zYTwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvYS1ibWZib3Zlc3BhL3B1YmxpY2Fjb2VzLmFzcHgnIHRhcmdldD0nJz5QdWJsaWNhw6fDtWVzPC9hPjwvbGk%2BPC91bD48L2xpPjxsaSBpZD0nbWVyY2Fkbyc%2BPGEgaHJlZj0nIycgY2xhc3M9J21lcmNhZG9zaG92ZXInIGlkPSdsaW5rTWVyY2Fkbyc%2BPGltZyBzcmM9Jy9zaGFyZWQvY3NzL2ltZy90cmFuc3AuZ2lmJyAvPjwvYT48dWw%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9tZXJjYWRvcy9hY29lcy5hc3B4JyB0YXJnZXQ9Jyc%2BQcOnw7VlcyA8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL21lcmNhZG9zL21lcmNhZG9yaWFzLWUtZnV0dXJvcy5hc3B4JyB0YXJnZXQ9Jyc%2BTWVyY2Fkb3JpYXMgZSBGdXR1cm9zPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tY2FtYmlvLmFzcHgnIHRhcmdldD0nJz5Dw6JtYmlvPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tYXRpdm9zLmFzcHgnIHRhcmdldD0nJz5BdGl2b3M8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1mdW5kb3MuYXNweCcgdGFyZ2V0PScnPkZ1bmRvcyAvIEVURnM8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1sZWlsb2VzLmFzcHgnIHRhcmdldD0nJz5MZWlsw7VlczwvYT48L2xpPjxsaT48YSBocmVmPScvUmVuZGEtRml4YS9SZW5kYUZpeGEuYXNweCcgdGFyZ2V0PScnPlJlbmRhIEZpeGE8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1vdXRyb3MtdGl0dWxvcy5hc3B4JyB0YXJnZXQ9Jyc%2BT3V0cm9zIFTDrXR1bG9zPC9hPjwvbGk%2BPC91bD48L2xpPjxsaSBpZD0nY2VudHJvZGVpbmZvcm1hY29lcyc%2BPGEgaHJlZj0nIycgY2xhc3M9J2NlbnRyb2RlaW5mb3JtYWNvZXMnIGlkPSdsaW5rQ2VudHJvJz48aW1nIHNyYz0nL3NoYXJlZC9jc3MvaW1nL3RyYW5zcC5naWYnIC8%2BPC9hPjx1bCBvbm1vdXNlb3Zlcj0ibGlua0NlbnRyby5jbGFzc05hbWU9J2NlbnRyb2RlaW5mb3JtYWNvZXNob3Zlcic7IiBvbm1vdXNlb3V0PSJsaW5rQ2VudHJvLmNsYXNzTmFtZT0nY2VudHJvZGVpbmZvcm1hY29lcyc7Ij48bGk%2BPGEgaHJlZj0nL3B0LWJyL2VkdWNhY2lvbmFsL2N1cnNvcy9jdXJzb3MuYXNweCcgdGFyZ2V0PScnPkN1cnNvczwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvZWR1Y2FjaW9uYWwvc2ltdWxhZG9yZXMvc2ltdWxhZG9yZXMuYXNweCcgdGFyZ2V0PScnPlNpbXVsYWRvcmVzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9lZHVjYWNpb25hbC9vcmNhbWVudG8tcGVzc29hbC5hc3B4JyB0YXJnZXQ9Jyc%2BT3LDp2FtZW50byBwZXNzb2FsPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9lZHVjYWNpb25hbC92aWRlb3MtZm9saGV0b3MtZWR1Y2F0aXZvcy5hc3B4JyB0YXJnZXQ9Jyc%2BVsOtZGVvcyBlIEZvbGhldG9zIEVkdWNhdGl2b3M8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3NoYXJlZC9pZnJhbWUuYXNweD9pZGlvbWE9cHQtYnImdXJsPWh0dHA6Ly93d3cuYm1mYm92ZXNwYS5jb20uYnIvcHQtYnIvZWR1Y2FjaW9uYWwvZWR1Y2FyL0Zvcm1JbnNjcmljYW9QYWxlc3RyYUFjZXNzb0luc3QuYXNwJyB0YXJnZXQ9Jyc%2BUGFsZXN0cmFzIEluc3RpdHVjaW9uYWlzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9lZHVjYWNpb25hbC9pbmljaWF0aXZhcy5hc3B4JyB0YXJnZXQ9Jyc%2BSW5pY2lhdGl2YXM8L2E%2BPC9saT48L3VsPjwvbGk%2BPGxpIGlkPSdhYmFzZXJ2aWNvcyc%2BPGEgaHJlZj0nIycgY2xhc3M9J2FiYXNlcnZpY29zJyBpZD0nbGlua1NlcnZpY28nPjxpbWcgc3JjPScvc2hhcmVkL2Nzcy9pbWcvdHJhbnNwLmdpZicgLz48L2E%2BPHVsIG9ubW91c2VvdmVyPSJsaW5rU2Vydmljby5jbGFzc05hbWU9J3NlcnZpY29zaG92ZXInOyIgb25tb3VzZW91dD0ibGlua1NlcnZpY28uY2xhc3NOYW1lPSdhYmFzZXJ2aWNvcyc7Ij48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1jb25lY3RpdmlkYWRlLmFzcHgnIHRhcmdldD0nJz5Tb2x1w6fDtWVzIGRlIENvbmVjdGl2aWRhZGU8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1zZXJ2aWNvcy1kZS1pbmZvcm1hY2FvLmFzcHgnIHRhcmdldD0nJz5TZXJ2acOnb3MgZGUgSW5mb3JtYcOnw6NvPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tc29sdWNvZXMtcGFyYS1uZWdvY2lhY2FvLmFzcHgnIHRhcmdldD0nJz5Tb2x1w6fDtWVzIHBhcmEgTmVnb2NpYcOnw6NvPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tc2Vydmljb3MtZGUtcG9zLW5lZ29jaWFjYW8uYXNweCcgdGFyZ2V0PScnPlNlcnZpw6dvcyBkZSBQw7NzLW5lZ29jaWHDp8OjbzwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvaW50cm9zL2ludHJvLWNlcnRpZmljYWNhby5hc3B4JyB0YXJnZXQ9Jyc%2BQ2VydGlmaWNhw6fDo288L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL3NlcnZpY29zL3NvbHVjb2VzLXBhcmEtZW1wcmVzYXMvc29sdWNvZXMtcGFyYS1lbXByZXNhcy5hc3B4JyB0YXJnZXQ9Jyc%2BU29sdcOnw7VlcyBwYXJhIEVtcHJlc2FzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tZW1wcmVzdGltby1kZS1hdGl2b3MuYXNweCcgdGFyZ2V0PScnPkVtcHLDqXN0aW1vIGRlIEF0aXZvczwvYT48L2xpPjxsaT48YSBocmVmPSdodHRwOi8vd3d3LmJtZmJvdmVzcGEuY29tLmJyL2JhbmNvJyB0YXJnZXQ9J19ibGFuayc%2BQmFuY28gQk0mRkJPVkVTUEE8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby1jdXN0b3MtZS10cmlidXRvcy5hc3B4JyB0YXJnZXQ9Jyc%2BQ3VzdG9zIGUgVHJpYnV0b3M8L2E%2BPC9saT48L3VsPjwvbGk%2BPGxpIGlkPSdyZWd1bGFjYW8nPjxhIGhyZWY9JyMnIGNsYXNzPSdyZWd1bGFjYW8nIGlkPSdsaW5rUmVndWxhY2FvJz48aW1nIHNyYz0nL3NoYXJlZC9jc3MvaW1nL3RyYW5zcC5naWYnIC8%2BPC9hPjx1bCBvbm1vdXNlb3Zlcj0ibGlua1JlZ3VsYWNhby5jbGFzc05hbWU9J3JlZ3VsYWNhb2hvdmVyJzsiIG9ubW91c2VvdXQ9ImxpbmtSZWd1bGFjYW8uY2xhc3NOYW1lPSdyZWd1bGFjYW8nOyI%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tcmVndWxhbWVudG9zLWUtbm9ybWFzLmFzcHgnIHRhcmdldD0nJz5SZWd1bGFtZW50b3MgZSBOb3JtYXM8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0naHR0cDovL3d3dy5ic20tYXV0b3JyZWd1bGFjYW8uY29tLmJyL2hvbWUuYXNwJyB0YXJnZXQ9J19ibGFuayc%2BU3VwZXJ2aXPDo28gZGUgTWVyY2FkbyAtIEJTTTwvYT48L2xpPjxsaT48YSBocmVmPScvcHQtYnIvcmVndWxhY2FvL2NhbWFyYS1kZS1hcmJpdHJhZ2VtLWRvLW1lcmNhZG8vY2FtYXJhLWRlLWFyYml0cmFnZW0tZG8tbWVyY2Fkby5hc3B4JyB0YXJnZXQ9Jyc%2BQ8OibWFyYSBkZSBBcmJpdHJhZ2VtIGRvIE1lcmNhZG8g4oCTIENBTTwvYT48L2xpPjxsaT48YSBocmVmPScvb2ZpY2lvc0NvbXVuaWNhZG9zL29maWNpb3NDb211bmljYWRvcy5hc3B4P2lkaW9tYT1wdC1icicgdGFyZ2V0PScnPkluZm9ybWVzIGFvcyBQYXJ0aWNpcGFudGVzIGRvIE1lcmNhZG88L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL3JlZ3VsYWNhby9jYWxlbmRhcmlvLWRvLW1lcmNhZG8vY2FsZW5kYXJpby1kby1tZXJjYWRvLmFzcHgnIHRhcmdldD0nJz5DYWxlbmTDoXJpbyBkbyBNZXJjYWRvPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8taG9yYXJpb3MtZGUtbmVnb2NpYWNhby5hc3B4JyB0YXJnZXQ9Jyc%2BSG9yw6FyaW9zIGRlIE5lZ29jaWHDp8OjbzwvYT48L2xpPjwvdWw%2BPC9saT48bGkgaWQ9J3BhcnRpY2lwYW50ZXMnPjxhIGhyZWY9JyMnIGNsYXNzPSdwYXJ0aWNpcGFudGVzJyBpZD0nbGlua1BhcnRpY2lwYW50ZXMnPjxpbWcgc3JjPScvc2hhcmVkL2Nzcy9pbWcvdHJhbnNwLmdpZicgLz48L2E%2BPHVsIG9ubW91c2VvdmVyPSJsaW5rUGFydGljaXBhbnRlcy5jbGFzc05hbWU9J3BhcnRpY2lwYW50ZXNob3Zlcic7IiBvbm1vdXNlb3V0PSJsaW5rUGFydGljaXBhbnRlcy5jbGFzc05hbWU9J3BhcnRpY2lwYW50ZXMnOyI%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9pbnRyb3MvaW50cm8tY29ycmV0b3Jhcy5hc3B4JyB0YXJnZXQ9Jyc%2BQ29ycmV0b3JhczwvYT48L2xpPjxsaT48YSBocmVmPScvQWdlbnRlcy9hZ2VudGVzLmFzcHgnIHRhcmdldD0nJz5BZ2VudGVzIGRlIEN1c3TDs2RpYSBlIENvbXBlbnNhw6fDo288L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3NoYXJlZC9pZnJhbWUuYXNweD9hbHR1cmE9MTQ1MCZpZGlvbWE9cHQtYnImdXJsPXd3dzIuYm1mLmNvbS5ici9wYWdlcy9wb3J0YWwvYm1mYm92ZXNwYS9hc3NvY2lhZG9zMS9hc3NvY2lhZG9zUGVzcXVpc2ExLmFzcCcgdGFyZ2V0PScnPk91dHJvcyBQYXJ0aWNpcGFudGVzPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9QYXJ0aWNpcGFudGVzL1BRTy9Qcm9ncmFtYS1kZS1xdWFsaWZpY2FjYW8tb3BlcmFjaW9uYWwuYXNweCcgdGFyZ2V0PScnPlByb2dyYW1hIGRlIFF1YWxpZmljYcOnw6NvIE9wZXJhY2lvbmFsPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9zaGFyZWQvaWZyYW1lLmFzcHg%2FYWx0dXJhPTQwMCZpZGlvbWE9cHQtYnImdXJsPWh0dHA6Ly93d3cuYm1mYm92ZXNwYS5jb20uYnIvcHQtYnIvbWVyY2Fkb3MvbWVyY2Fkb3JpYXMtZS1mdXR1cm9zL3BhcnRpY2lwYW50ZXMvZG9jdW1lbnRhY2FvLWNhZGFzdHJhbC5hc3AnIHRhcmdldD0nJz5Eb2N1bWVudGHDp8OjbyBDYWRhc3RyYWw8L2E%2BPC9saT48L3VsPjwvbGk%2BPGxpIGlkPSdpbnZpc3RhamEnPjxhIGhyZWY9JyMnIGNsYXNzPSdpbnZpc3RhamEnIGlkPSdsaW5raW52aXN0YWphJz48aW1nIHNyYz0nL3NoYXJlZC9jc3MvaW1nL3RyYW5zcC5naWYnIC8%2BPC9hPjx1bCBvbm1vdXNlb3Zlcj0ibGlua2ludmlzdGFqYS5jbGFzc05hbWU9J2ludmlzdGFqYWhvdmVyJzsiIG9ubW91c2VvdXQ9ImxpbmtpbnZpc3RhamEuY2xhc3NOYW1lPSdpbnZpc3RhamEnOyI%2BPGxpPjxhIGhyZWY9Jy9jb21vLWludmVzdGlyLW5hLWJvbHNhLmFzcHgnIHRhcmdldD0nJz5Db21vIGludmVzdGlyIGVtIGHDp8O1ZXMgPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9wdC1ici9tZXJjYWRvcy9vdXRyb3MtdGl0dWxvcy90ZXNvdXJvLWRpcmV0by9jb21vLWludmVzdGlyLW5vLXRlc291cm8tZGlyZXRvLmFzcHgnIHRhcmdldD0nJz5Db21vIGludmVzdGlyIG5vIFRlc291cm8gRGlyZXRvPC9hPjwvbGk%2BPGxpPjxhIGhyZWY9Jy9ldGYvY29tby1pbnZlc3Rpci1lbS1ldGZzLmFzcHgnIHRhcmdldD0nJz5Db21vIGludmVzdGlyIGVtIEVURnM8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL0Z1bmRvcy1MaXN0YWRvcy9jb21vLWludmVzdGlyLWVtLWZ1bmRvcy1pbW9iaWxpYXJpb3MuYXNweCcgdGFyZ2V0PScnPkNvbW8gaW52ZXN0aXIgZW0gZnVuZG9zIGltb2JpbGnDoXJpb3M8L2E%2BPC9saT48bGk%2BPGEgaHJlZj0nL3B0LWJyL2ludHJvcy9pbnRyby10aXBvcy1kZS1pbnZlc3RpbWVudG9zLmFzcHgnIHRhcmdldD0nJz5UaXBvcyBkZSBpbnZlc3RpbWVudG9zPC9hPjwvbGk%2BPC91bD48L2xpPjwvdWw%2BPC9kaXY%2BZAIJD2QWAgIFD2QWAgIDDw9kFgIfBQWCAXdpbmRvdy5vcGVuKCdodHRwOi8vd3d3LmJtZmJvdmVzcGEuY29tLmJyL2NpYXMtbGlzdGFkYXMvZW1wcmVzYXMtbGlzdGFkYXMvQnVzY2FFbXByZXNhTGlzdGFkYS5hc3B4P0lkaW9tYT1wdC1iciZ2ZXJzYW89aW1wcmVzc2FvJylkAgsPZBYCAgEPZBYGAgUPDxYCHwkFCjAzLzAxLzIwMTRkZAIJDw8WAh8JBQUwNWgwMGRkAhMPDxYCHgVDb3VudAIEZBYCAgMPDxYGHgJJRAUacHZ3QnVzY2FBbm9MaXN0YWdlbUVtcHJlc2EeB1Rvb2xUaXBlHwRoZGQCDQ8PZBYCHwUFHGhpc3RvcnkuYmFjaygpOyByZXR1cm4gZmFsc2VkAhMPDxYCHwRnZGQYBgU8Y3RsMDAkY29udGVudFBsYWNlSG9sZGVyQ29udGV1ZG8kQnVzY2FTZXRvckVtcHJlc2ExJGdyZFNldG9yDxQrAAJkFwBkBUFjdGwwMCRjb250ZW50UGxhY2VIb2xkZXJDb250ZXVkbyRCdXNjYVNlZ21lbnRvRW1wcmVzYTEkZ3JkRW1wcmVzYQ8UKwACZBcAZAUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgkFPWN0bDAwJGNvbnRlbnRQbGFjZUhvbGRlckNvbnRldWRvJEJ1c2NhTm9tZUVtcHJlc2ExJGdyZEVtcHJlc2EFPGN0bDAwJGNvbnRlbnRQbGFjZUhvbGRlckNvbnRldWRvJEJ1c2NhU2V0b3JFbXByZXNhMSRncmRTZXRvcgU%2BY3RsMDAkY29udGVudFBsYWNlSG9sZGVyQ29udGV1ZG8kQnVzY2FTZXRvckVtcHJlc2ExJGdyZEVtcHJlc2EFQWN0bDAwJGNvbnRlbnRQbGFjZUhvbGRlckNvbnRldWRvJEJ1c2NhU2VnbWVudG9FbXByZXNhMSRncmRFbXByZXNhBURjdGwwMCRjb250ZW50UGxhY2VIb2xkZXJDb250ZXVkbyRCdXNjYUFub0xpc3RhZ2VtRW1wcmVzYTEkZ3JkRW1wcmVzYQUvY3RsMDAkY29udGVudFBsYWNlSG9sZGVyQ29udGV1ZG8kQWpheFBhbmVsQnVzY2EFK2N0bDAwJGNvbnRlbnRQbGFjZUhvbGRlckNvbnRldWRvJG1wZ1BhZ2luYXMFG2N0bDAwJG1lbnVCT1ZFU1BBU2VjdW5kYXJpbwU2Y3RsMDAkY29udGVudFBsYWNlSG9sZGVyQ29udGV1ZG8kdGFiTWVudUVtcHJlc2FMaXN0YWRhBURjdGwwMCRjb250ZW50UGxhY2VIb2xkZXJDb250ZXVkbyRCdXNjYUFub0xpc3RhZ2VtRW1wcmVzYTEkZ3JkRW1wcmVzYQ8UKwACZBcAZAU%2BY3RsMDAkY29udGVudFBsYWNlSG9sZGVyQ29udGV1ZG8kQnVzY2FTZXRvckVtcHJlc2ExJGdyZEVtcHJlc2EPFCsAAmQXAGQFPWN0bDAwJGNvbnRlbnRQbGFjZUhvbGRlckNvbnRldWRvJEJ1c2NhTm9tZUVtcHJlc2ExJGdyZEVtcHJlc2EPFCsAAmQXAGRtcI5Cus4di08SWF65Qck0bf7mzw%3D%3D&__EVENTVALIDATION=%2FwEWLQL13fDsDgKatY%2BlDgLz2ISXCALR05XvBgKWjICHCwKrqYeWCwL85ODVCQLh%2B8LADwKyt5yADgKXzv7qAwLoidiqAgLNoLqVCALuyLaBBALT35jsCQKkm%2FKrCAKJstSWDgLa7a3WDAK%2FhJDBAgKQwOmAAQL11svrBgL2pYL%2FBwLbvOTpDQKs%2BL2pDAKRj6CUAgLiyvlTAsfh274GApidtf4EAv2zl%2BkKAp7ck9UGAoPz9b8MAtSuz%2F8KApb%2Fx9cCAvuVqsIIAszRg4IHArHo5ewMAoKkv6wLAue6oZcBArj2%2BtYPAp2N3cEFAr612a0BAqPMu5gHAqqynsAFAvrzvPwMAr%2FS5NkCArSz5PIOQ2kObYPrx4viB81ueLUDKRmdAFA%3D&ctl00$ucTopo$btnBusca=Busca&ctl00$menuBOVESPASecundario=&=&ctl00_contentPlaceHolderConteudo_AjaxPanelBuscaPostDataValue=ctl00_contentPlaceHolderConteudo_AjaxPanelBusca%2CActiveElement%2Cctl00_contentPlaceHolderConteudo_BuscaNomeEmpresa1_btnTodas%3B&ctl00$contentPlaceHolderConteudo$tabMenuEmpresaListada=%7B%22State%22%3A%7B%7D%2C%22TabState%22%3A%7B%22ctl00_contentPlaceHolderConteudo_tabMenuEmpresaListada_tabNome%22%3A%7B%22Selected%22%3Atrue%7D%7D%7D&=&ctl00$contentPlaceHolderConteudo$BuscaNomeEmpresa1$txtNomeEmpresa$txtNomeEmpresa=&ctl00$contentPlaceHolderConteudo$mpgPaginas_Selected=0&cboAgentesCorretorasNome=%23&cboAgentesCorretorasCodigo=%23&RadAJAXControlID=ctl00_contentPlaceHolderConteudo_AjaxPanelBusca&httprequest=true";

	private static final String TABLE_PATTERN = "<tbody\\b[^>]*>(.*?)</tbody>";

	private static final String LINE_PATTERN = "<tr\\b[^>]*>(.*?)</tr>";

	private static final String COLUMN_PATTERN = "<td\\b[^>]*>(.*?)</td>";

	private static final String CODIGOCVM_PATTERN = "codigoCvm=([0-9]*?)\">(.*?)<";

	@Inject
	private IApplicationProperties applicationProperties;

	public static void main(String[] args) {
		CrawlerAllCompanies crawlerAllCompanies = new CrawlerAllCompanies();

		crawlerAllCompanies.applicationProperties = new ApplicationProperties();

		try {
			List<String[]> companies = crawlerAllCompanies.retrieveAllCompanies();

			for (String[] company : companies) {
				if (LOGGER.isInfoEnabled()) {
					LOGGER.info(String.format("\"CodigoCvm\" [%s] - Company Name [%s].", company[0], company[1]));
				}
			}
		} catch (IOException e) {
			LOGGER.error(e.getMessage(), e);
		}
	}

	@Override
	public List<String[]> retrieveAllCompanies() throws IOException {
		StringBuffer response = CrawlerUtils.postRequestContent(LINK, BODY, this.applicationProperties.getProxy());

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(response.toString());
		}

		// 1. Table.
		List<String> tables = this.regexTable(response.toString());

		if (tables.size() > 1) {
			LOGGER.error("Was founded more than 1 table.");
			System.exit(-1);
		}

		if (tables.size() < 1) {
			LOGGER.error("Not founded the table.");
			System.exit(-1);
		}

		// 2. Lines.
		List<String> lines = this.regexLines(tables.get(0));

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(lines);
		}

		// 3. Companies.
		List<String[]> allCodesAndCompany = new ArrayList<String[]>();

		for (String line : lines) {
			String[] cvmAndCompany = this.regexCvmAndCompany(line);

			if (cvmAndCompany != null) {
				allCodesAndCompany.add(cvmAndCompany);
			}
		}

		return allCodesAndCompany;
	}

	public void setApplicationProperties(IApplicationProperties applicationProperties) {
		this.applicationProperties = applicationProperties;
	}

	private List<String> regexTable(String content) {
		List<String> tables = new ArrayList<String>();
		Pattern pattern = Pattern.compile(TABLE_PATTERN);
		Matcher matcher = pattern.matcher(content);

		while (matcher.find()) {
			tables.add(matcher.group());
		}

		return tables;
	}

	private List<String> regexLines(String content) {
		List<String> lines = new ArrayList<String>();
		Pattern pattern = Pattern.compile(LINE_PATTERN);
		Matcher matcher = pattern.matcher(content);

		while (matcher.find()) {
			lines.add(matcher.group());
		}

		return lines ;
	}

	private String[] regexCvmAndCompany(String line) {
		List<String> columns = new ArrayList<String>();
		Pattern pattern = Pattern.compile(COLUMN_PATTERN);
		Matcher matcher = pattern.matcher(line);

		while (matcher.find()) {
			columns.add(matcher.group());
		}

		if (columns.size() != 3) {
			LOGGER.error("Wrong number of columns.");
			return null;
		}

		Pattern patternCodigoCvm = Pattern.compile(CODIGOCVM_PATTERN);
		Matcher matcherCodigoCvm = patternCodigoCvm.matcher(columns.get(1));
		String[] codigoCompany = null;
		String strCodigoCompany = "";

		if (matcherCodigoCvm.find()) {
			strCodigoCompany = matcherCodigoCvm.group();
			codigoCompany = strCodigoCompany
					.replaceFirst("codigoCvm=", "")
					.replaceAll("<", "")
					.split("\">");
		} else {
			LOGGER.error("More codes was founded, but must found just one.");
			return null;
		}

		if (matcherCodigoCvm.find()) {
			LOGGER.error("More codes was founded, but must found just one.");
			return null;
		}

		if (codigoCompany.length != 2) {
			LOGGER.error(String.format("Wrong number of values founded to line [%s].", strCodigoCompany));
			return null;
		}

		codigoCompany[0] = codigoCompany[0].trim().toLowerCase();
		codigoCompany[1] = codigoCompany[1].trim().toLowerCase();

		return codigoCompany;
	}

}
